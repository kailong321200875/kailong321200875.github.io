<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git-cz初使用</title>
    <url>/git-cz%E5%88%9D%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>在日常 git commit 中，就是你在做一次修改后类似于写一个备注，但是这样 commit 的文本若不进行管理，可读性不太好，所以为了规范化和可读性，推荐使用 git-cz 进行 commit 管理。</p>
</blockquote>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g git-cz</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>在我们 <code>git add .</code> 之后，按照正常的流程是直接 <code>git commit</code>，现在我们安装完 <code>git-cz</code> 之后，就需要使用以下命令来代替 <code>git commit</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cz</span><br></pre></td></tr></table></figure>

<h2 id="选择类型"><a href="#选择类型" class="headerlink" title="选择类型"></a>选择类型</h2><blockquote>
<p>执行完之后就会出现以下选择项，我们需要手动选择提交类型，type代表某次提交的类型，比如是修复一个bug还是增加一个新的feature。所有的type类型如下：</p>
</blockquote>
<p><img src="https://sanyuanda.oss-cn-hangzhou.aliyuncs.com/imgs/QQ%E5%9B%BE%E7%89%8720200326113900.png" alt=""></p>
<ul>
<li>test：测试用例，包括单元测试、集成测试等</li>
<li>feat：新增feature</li>
<li>fix: 修复bug</li>
<li>chore: 改变构建流程、或者增加依赖库、工具等</li>
<li>docs: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</li>
<li>refactor: 代码重构，没有加新功能或者修复bug</li>
<li>style: 仅仅修改了空格、格式缩进等等，不改变代码逻辑</li>
<li>perf: 优化相关，比如提升性能、体验</li>
<li>revert: 回滚到上一个版本</li>
</ul>
<blockquote>
<p>选择完提交类型之后，就可以根据提示一步步操作，最后执行 <code>git push</code> 就可以把提交代码到远程仓库上了。</p>
</blockquote>
<blockquote>
<p>最后就可以在仓库中看到规范化的 <code>commit</code> 记录了</p>
</blockquote>
<p><img src="https://sanyuanda.oss-cn-hangzhou.aliyuncs.com/imgs/QQ%E5%9B%BE%E7%89%8720200326123920.png" alt=""></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git commit</tag>
        <tag>git 规范</tag>
        <tag>git 提交</tag>
      </tags>
  </entry>
  <entry>
    <title>git创建分支并提交远程分支的步骤</title>
    <url>/git%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%B9%B6%E6%8F%90%E4%BA%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<blockquote>
<p>在日常开发做，有的时候会涉及到多人协作开发，所以在这里记录一下在git多人协作开发下，如何在本地创建分支并提交远程分支</p>
</blockquote>
<a id="more"></a>

<div class="note info">
            <p>以下代码块中的 newbranch 均属于示例分支名，请根据实际情况自行修改</p>
          </div>

<h2 id="在本地创建分支"><a href="#在本地创建分支" class="headerlink" title="在本地创建分支"></a>在本地创建分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch newbranch</span><br></pre></td></tr></table></figure>

<h2 id="把本地分支push到远程"><a href="#把本地分支push到远程" class="headerlink" title="把本地分支push到远程"></a>把本地分支push到远程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin newbranch</span><br></pre></td></tr></table></figure>

<h2 id="切换到该分支"><a href="#切换到该分支" class="headerlink" title="切换到该分支"></a>切换到该分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout newbranch</span><br></pre></td></tr></table></figure>

<h2 id="查看本地修改"><a href="#查看本地修改" class="headerlink" title="查看本地修改"></a>查看本地修改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h2 id="添加本地修改"><a href="#添加本地修改" class="headerlink" title="添加本地修改"></a>添加本地修改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h2 id="commit修改"><a href="#commit修改" class="headerlink" title="commit修改"></a>commit修改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">'XXXX'</span></span><br></pre></td></tr></table></figure>

<h2 id="当前分支关联远程分支"><a href="#当前分支关联远程分支" class="headerlink" title="当前分支关联远程分支"></a>当前分支关联远程分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin newbranch</span><br></pre></td></tr></table></figure>

<h2 id="切换到主分支"><a href="#切换到主分支" class="headerlink" title="切换到主分支"></a>切换到主分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<h2 id="更新远端代码"><a href="#更新远端代码" class="headerlink" title="更新远端代码"></a>更新远端代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h2 id="合并分支代码到主分支"><a href="#合并分支代码到主分支" class="headerlink" title="合并分支代码到主分支"></a>合并分支代码到主分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge newbranch</span><br></pre></td></tr></table></figure>

<h2 id="push到远程主分支"><a href="#push到远程主分支" class="headerlink" title="push到远程主分支"></a>push到远程主分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>


<div class="note info">
            <p>以上所示git命令需要看官们有一定git知识，本文只针对入门级看官，文章如有错误，请各位看官们批评指出，谢谢~</p>
          </div>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git分支</tag>
        <tag>git多人协作</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实现图片上传到阿里云</title>
    <url>/vue%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</url>
    <content><![CDATA[<blockquote>
<p>在项目中，有遇到图片上传到阿里云上，所以在这里分享记录下。</p>
</blockquote>
<a id="more"></a>

<div class="note info">
            <p>这里我们只提供一个简单的例子，请根据项目情况自行修改调整，这里我们使用了 <code>element</code> 的 <code>upload</code> 组件</p>
          </div>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>首先，我们需要安装一下 <code>ali-oss</code> 插件，然后在项目中引入</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install ali-oss --save</span><br><span class="line"></span><br><span class="line">import OSS from <span class="string">'ali-oss'</span></span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>然后在 <code>template</code> 模版中使用 <code>upload</code> 组件，代码如下：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;el-upload</span><br><span class="line">    class=<span class="string">"avatar-uploader"</span></span><br><span class="line">    :show-file-list=<span class="string">"false"</span></span><br><span class="line">    :http-request=<span class="string">"avatarUpload"</span></span><br><span class="line">    accept=<span class="string">"image/png,image/gif,image/jpg,image/jpeg"</span></span><br><span class="line">    action=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;img v-if=<span class="string">"imageUrl"</span> :src=<span class="string">"imageUrl"</span> class=<span class="string">"avatar"</span>&gt;</span><br><span class="line">    &lt;i v-else class=<span class="string">"el-icon-plus avatar-uploader-icon"</span>&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后使用 <code>upload</code> 组件中自定义上传方法 <code>http-request</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 自定义上传</span><br><span class="line">async avatarUpload(file) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!this.client) &#123;</span><br><span class="line">    this.client = new OSS(&#123;</span><br><span class="line">      region: <span class="string">'oss-cn-hangzhou'</span>,</span><br><span class="line">      accessKeyId: <span class="string">''</span>, // 阿里云的 AccessKey ID</span><br><span class="line">      accessKeySecret: <span class="string">''</span>, // 阿里云的 Access Key Secret</span><br><span class="line">      bucket: <span class="string">''</span> // 存储空间 Bucket 名称</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  const fileName = `<span class="variable">$&#123;file.file.name&#125;</span>` // 文件名称</span><br><span class="line">  const path = <span class="string">'/imgs/'</span> // 指定存放路径</span><br><span class="line">  try &#123;</span><br><span class="line">    const res = await this.client.multipartUpload(path + fileName, file.file)</span><br><span class="line">    <span class="keyword">if</span> (res.res) &#123;</span><br><span class="line">      // 上传成功之后的操作</span><br><span class="line">      this.imageUrl = res.res.requestUrls[0]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>accessKeyId、accessKeySecret、bucket 通常是由后端返回回来的，不推荐写死在前端代码中。</p>
          </div>

<blockquote>
<p>上传成功之后，我们就可以在阿里云上看到我们所上传的图片了</p>
</blockquote>
<p><img src="https://sanyuanda.oss-cn-hangzhou.aliyuncs.com/imgs/09ACC501-9978-4673-B5EC-AC2A5B28FCE7.png" alt=""></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>以上就是我对图片上传到阿里云的一点技术分享，目前多图上传的参考了网上的写法，基本上都是循环调用，我这里也暂时没找到相关的 API，所以如果看官们有多图上传的最优办法，欢迎留言评论。</p>
</blockquote>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>oss</tag>
        <tag>上传图片</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
</search>
